function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Looper = require('./looper');
const Util = require('./util');
const RemoteRequest = require('./remote-request');

const Base = require('sdk-base');
const Cache = require('./cache');

class HarmonyClient extends Base {
  constructor(opts = {}) {
    super({
      initMethod: 'init'
    });
    this.opts = opts;
    // 内存
    this.cache = new Cache();
  }

  init() {
    var _this = this;

    return _asyncToGenerator(function* () {
      const defaultOptions = {
        env: 'production', // 环境，挖财已有的环境包括：test, production, staging
        unit: 'default', // unit:  表示单元，通过环境变量APP_IDC获取，挖财已有的单元包括：hzxs,hzxs3,hzqsh,hzifc，如果没有配置环境变量可以写default,harmony会返回同机房的jasmine服务器地址
        crossUnit: 2 // 默认为2。需要跨单元的场景只需要在查询时加上crossUnit参数 1:支持跨单元 2:不支持；跨单元指的是,在本单元没有可服务的节点时,流量路由到中心单元
      };
      const options = Object.assign({}, defaultOptions, _this.opts);

      // 环境配置
      Util.setHarmonyConfig(options, _this.cache);

      // 轮询
      const looper = new Looper(_this);
      looper.start();
    })();
  }

  /**
   * 获取domain对应的Harmony服务的IP+port
   * @param {*} domain
   * @return { "host": "172.16.107.104", "port": 8080}
   */
  getServer(domain = '') {
    return RemoteRequest.getRandomDomainIP(domain, this.cache);
  }

  /**
   * 直接获取接口数据
   * @param {} options: {
      method: '',
      url: '',
      qs: {}
    }
   * @return {请求options.url返回的数据格式}
   */
  getData(options = {}) {
    return RemoteRequest.getDataWithUrl(options, this.cache);
  }
}

module.exports = HarmonyClient;